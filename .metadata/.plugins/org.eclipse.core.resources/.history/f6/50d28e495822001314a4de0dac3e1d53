package org.peer.server;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import org.Response.Response;
import org.Response.ResponseHelper;
import org.base.peerserver.RFCIndexNode;
import org.common.Constants;
import org.common.DataKeyConstants;
import org.common.ResponseType;
import org.peer.client.ClientFunction;
import org.request.Request;
import org.request.RequestType;

public class PeerServer extends Thread {
	
	private Socket clientSocket;
	
	
	public PeerServer(Socket clientSocket){
		this.clientSocket = clientSocket;
		
	}

	@Override
	public void run() {
		System.out.println("run method on peer server invoked");
		ObjectInputStream objectInputStream;
		ObjectOutputStream objectOutputStream;
		Request request;
		Response response;
		
		try{
			objectInputStream = new ObjectInputStream(this.clientSocket.getInputStream());
			objectOutputStream = new ObjectOutputStream(this.clientSocket.getOutputStream());
			request = (Request) objectInputStream.readObject();	
			System.out.println("\nrequest type:"+request.getType().toString());
			if(request.getType() == RequestType.RFC_QUERY){
				response = handleRFCQueryRequest(request);
				objectOutputStream.writeObject(response);
			}else if(request.getType() == RequestType.RFC_REQUEST){
				response = handleRFCIndexRequest(request);
				objectOutputStream.writeObject(response);
			}
		}catch(IOException |ClassNotFoundException ex){
			System.out.println(ex.getMessage());
		}
	}
	
	private Response handleRFCQueryRequest(Request request){
		
		Response response = null;
		List<RFCIndexNode> rfcList = new LinkedList<RFCIndexNode>();
		rfcList.addAll(ClientFunction.getRfcIndexList());
		HashMap<String, Object> data = new HashMap<>();
		data.put(DataKeyConstants.RFC_INDEX_LIST, rfcList);
		response = ResponseHelper.createResponse(ResponseType.RFC_QUERY_OK, data);
		return response;
	}
	
	private Response handleRFCIndexRequest(Request request){
		Response response= null;
		HashMap<String, Object> requestData = request.getData();
		int rfcNumber = (int) requestData.get(DataKeyConstants.RFC_INDEX);
		String rfcTitle = (String) requestData.get(DataKeyConstants.RFC_TITLE);
		HashMap<String, Object> responseData = new HashMap<String, Object>();
		byte [] fileData = getRFCFileData(rfcNumber, rfcTitle);
		if(fileData != null){
			responseData.put(DataKeyConstants.RFC_FILE_DATA, fileData);
			response = ResponseHelper.createResponse(ResponseType.GET_RFC_OK, responseData);
		}else{
			responseData.put(DataKeyConstants.ERROR_MESSAGE, Constants.RFC_NOT_FOUND);
			response = ResponseHelper.createResponse(ResponseType.GET_RFC_ERROR, responseData);
		}
		
		return response;
	}
	
	private byte[] getRFCFileData(int rfcNumber, String rfcTitle){
		System.out.println("in get file data rfc no " + rfcNumber + "rfc title " + rfcTitle);
		List<RFCIndexNode> rfcIndexList = ClientFunction.getRfcIndexList();
		byte [] fileData = null;
		//synchronized (rfcIndexList) {
			for(int i = 0; i < rfcIndexList.size(); i++){
				
				RFCIndexNode rfcNode = rfcIndexList.get(i);
				System.out.println("server rfc details no " + rfcNode.getRfcNumber() + " title " + rfcNode.getRfcTitle());
				if(rfcNode.getRfcNumber() == rfcNumber && rfcNode.getRfcTitle() == rfcTitle){
					Path path = Paths.get(rfcTitle);
					try {
						System.out.println("in try block");
						fileData = Files.readAllBytes(path);
					} catch (IOException e) {
						
						e.printStackTrace();
					}
					
				}
			}
		//}
		return fileData;
	}
	
	private byte [] testFileToByte(){
		Path path = Paths.get("rfc7025.txt");
		byte[] fileData = null;
		try {
			fileData = Files.readAllBytes(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fileData;
	}
	public static void main(String args[]){
		PeerServer peerServer = new PeerServer(null);
		byte [] fileData = peerServer.testFileToByte();
		System.out.println("size: " + fileData.length);
	}
}
