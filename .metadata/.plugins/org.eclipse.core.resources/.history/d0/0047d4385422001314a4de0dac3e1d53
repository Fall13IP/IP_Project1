package org.peer.client;
import java.util.List;
import java.util.Random;

import org.base.peerserver.RFCIndexNode;
import org.base.rsserver.PeerListNode;
import org.common.DataKeyConstants;
import org.peer.server.PeerServerApp;


public class ClientApp {

	public static void main(String[] args) {
		
		List <PeerListNode> peerList;
		//PeerServerApp peerServerApp = new PeerServerApp();
		//peerServerApp.start();
		System.out.println("After calling start");
		ClientFunction peer = new ClientFunction("peer1.txt");
		peer.registerPeer(1010);
		peer.pQueryFunc();
		peer.keepAliveFunc();
		peerList = peer.getPeerList();
		PeerListNode node = peerList.get(rand(peerList.size()));
		System.out.println("Connecting to " + node.getHostName());
		peer.RFCIndexFunc(node);
		List<RFCIndexNode> rfcList = peer.getRfcIndexList();
		String rfcTitle = rfcList.get(0).getRfcTitle();
		byte [] fileData = peer.GetRFCFunc(node, rfcList.get(0).getRfcNumber(), rfcList.get(0).getRfcTitle());
		if(fileData != null){
			System.out.println("File size: " + fileData.length);
		}
		peer.leaveFunc();
	}
public static int rand(int size){
	Random random = new Random();
	int randomint = random.nextInt(size);
	return randomint;
}
}
